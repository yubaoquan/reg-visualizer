/* eslint-disable no-restricted-globals, no-alert, global-require */
/* globals document, window */

const params = {
  embed: false,
  re: `==regexp==`,
  highlight: true,
  flags: '',
};

if (params.embed) document.body.className += ' embed';

const $ = (id) => document.getElementById(id);

function init(R, visualize, parse, K) {
  const paper = R('graphCt', 10, 10);
  const input = $('input');
  const errorBox = $('errorBox');
  const flags = Array.from(document.getElementsByName('flag'));
  const flagBox = $('flagBox');

  const getInputValue = () => input.value.trim();
  const setInputValue = (v) => {
    input.value = v.trim();
  };

  const setInnerText = (ele, s) => {
    ele.innerHTML = '';
    const t = document.createTextNode('');
    t.nodeValue = s;
    ele.appendChild(t);
    return s;
  };

  const setFlags = (fg) => {
    for (let i = 0, l = fg.length; i < l; i++) {
      // eslint-disable-next-line no-bitwise
      if (~fg.indexOf(flags[i].value)) flags[i].checked = true;
      else flags[i].checked = false;
    }
    setInnerText(flagBox, fg);
  };

  const getFlags = () => flags.reduce((fg, item) => (item.checked ? fg + item.value : fg), '');

  const showError = (re, err) => {
    errorBox.style.display = 'block';
    const msg = [`Error:${err.message}`, ''];

    if (typeof err.lastIndex === 'number') {
      msg.push(re);
      msg.push(`${K.repeats('-', err.lastIndex)}^`);
    }
    setInnerText(errorBox, msg.join('\n'));
  };

  const visualIt = (skipError) => {
    const re = getInputValue();
    errorBox.style.display = 'none';
    let ret;
    try {
      ret = parse(re);
      visualize(ret, getFlags(), paper);
    } catch (e) {
      if (e instanceof parse.RegexSyntaxError) {
        if (!skipError) showError(re, e);
      } else throw e;
    }
  };

  const initListeners = () => {
    const LF = '\n'.charCodeAt(0);
    const CR = '\r'.charCodeAt(0);

    input.addEventListener('keydown', (e) => {
      if (e.keyCode === LF || e.keyCode === CR) {
        e.preventDefault();
        e.stopPropagation();
        visualIt();
      }
    });

    let onKeyupTid;

    input.addEventListener('keyup', (e) => {
      if (e.keyCode === LF || e.keyCode === CR) return true;
      clearTimeout(onKeyupTid);
      onKeyupTid = setTimeout(() => visualIt(true), 100);
    });

    input.addEventListener('paste', (evt) => {
      let content = evt.clipboardData.getData('text')?.trim() || '';
      if (content[0] === '/' && /\/[img]*$/.test(content)) {
        evt.preventDefault();
        const endIndex = content.lastIndexOf('/');
        setFlags(content.slice(endIndex + 1));
        content = content.slice(1, endIndex);
        setInputValue(content);
      }
      setTimeout(visualIt, 50);
    });

    for (let i = 0, l = flags.length; i < l; i++) {
      flags[i].addEventListener('change', () => {
        setInnerText(flagBox, getFlags());
        visualIt();
      });
    }
  };

  const initMessage = () => {
    window.addEventListener('message', (msg) => {
      console.info(msg.data);
      if (msg.data.type === 'reg') {
        const { regText } = msg.data;
        input.value = regText;
        visualIt();
      }
    });
  };

  const dragGraph = (g) => {
    const startMove = (evt) => {
      window.getSelection().empty();

      let x = evt.clientX;
      let y = evt.clientY;

      const onMove = (e) => {
        const dx = x - e.clientX;
        const dy = y - e.clientY;
        if (
          (dx > 0 && g.scrollWidth - g.scrollLeft - g.clientWidth < 2) ||
          (dx < 0 && g.scrollLeft < 1)
        ) {
          document.documentElement.scrollLeft += dx;
          document.body.scrollLeft += dx;
        } else {
          g.scrollLeft += dx;
        }
        if (
          (dy > 0 && g.scrollHeight - g.scrollTop - g.clientHeight < 2) ||
          (dy < 0 && g.scrollTop < 1)
        ) {
          document.documentElement.scrollTop += dy;
          document.body.scrollTop += dy;
        } else {
          g.scrollTop += dy;
        }
        x = e.clientX;
        y = e.clientY;
      };

      g.addEventListener('mousemove', onMove);

      const unbind = () => {
        g.removeEventListener('mousemove', onMove);
        document.removeEventListener('mouseup', unbind, true);
        window.removeEventListener('mouseup', unbind, true);
      };

      document.addEventListener('mouseup', unbind, true);
      window.addEventListener('mouseup', unbind, true);
    };

    g.addEventListener('mousedown', startMove);
  };

  if (params.flags) setFlags(params.flags);
  if (params.re) setInputValue(params.re);

  visualIt();
  initListeners();
  initMessage();
  dragGraph($('graphCt'));
}

window.addEventListener('DOMContentLoaded', () => {
  const raphael = require('regulex').Raphael;
  const { parse } = require('regulex');
  const { visualize } = require('regulex');
  const { Kit } = require('regulex');
  init(raphael, visualize, parse, Kit);
});
